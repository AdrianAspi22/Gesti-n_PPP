// <auto-generated />
using System;
using GestionAsesoria.Operator.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionAsesoria.Operator.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CTIVitaeCONCYTEC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalendarSettings")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Configuraciones del calendario del actor, se guardará mediante una cadena de texto y estará separado por comas (por ejemplo 12, 14, 15), esta máscara vendra desde el front. Donde: 12--> IdCalendarioTesis   14--> IdCalendarioPPP   15--> IdCalendarioTutoría");

                    b.Property<string>("ClassifyActor")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Es un clasificador para seleccionar si es persona Natural será su género ejemplo: Masculino y Femenino, si es persona Jurídica se seleccionará: SAC, EIRL, Etc");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeORCID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Dependerá del contexto del Actor, si es persona Natural será el Nombre de la persona, si es persona jurídica será la Razón Social, si es entidad interna, llevará el nombre de la entidad como por ejemplo para actor Grupo de Investigación, Grupo de Investigación de Ingeniería de Software");

                    b.Property<string>("HigherDegree")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mayor Grado Académico");

                    b.Property<string>("IdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int?>("MainRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Dependerá del contexto del Actor, si es persona Natural será el Apellido de la persona, si es persona jurídica será la Nombre Comercial, si es entidad interna, llevará el Acrónimo de la entidad como por ejemplo para actor Grupo de Investigación, su acrónimo será GINSOFT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThirdName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActorTypeId");

                    b.HasIndex("IdentificationTypeId");

                    b.HasIndex("MainRoleId");

                    b.HasIndex("ParentId");

                    b.ToTable("Actor", t =>
                        {
                            t.HasComment("Representa a un actor en el sistema, el cual está involucrada en contratos de asesoría.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ActorSecondaryRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ActorId", "RoleId")
                        .IsUnique();

                    b.ToTable("ActorSecondaryRole");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ActorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdLabel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActorType");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoringContractId")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nota adicional sobre la sesión de asesoría, el \"?\" nos dice que es opcional llenar ese campo");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoringContractId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("AdvisingSession", t =>
                        {
                            t.HasComment("Representa una sesión de asesoría, que incluye tareas y notas relacionadas con una cita específica.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int")
                        .HasComment("Entidad Actor asociado al contrato de Asesoría");

                    b.Property<int?>("AdvisoringRequestId")
                        .HasColumnType("int")
                        .HasComment("Entidad de Solicitud de Asesoría asociado al contrato de Asesoría");

                    b.Property<string>("ContractNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Número de contrato");

                    b.Property<int>("ContractStatusId")
                        .HasColumnType("int")
                        .HasComment("Estado actual del contrato, relacionado con MasterDataValue.");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Se explica a detalle el motivo por el cual se está realizando el contrato");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de finalización del contrato, puede ser nula si el contrato está en curso");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasComment("Este atributo nos permite verificar si el usuario cuenta con un contrato activo");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de registro del contrato");

                    b.Property<int?>("ResearchAreaId")
                        .HasColumnType("int")
                        .HasComment("Tipo de contrato, relacionado con MasterDataValue.");

                    b.Property<int?>("ResearchGroupId")
                        .HasColumnType("int")
                        .HasComment("Tipo de contrato, relacionado con MasterDataValue.");

                    b.Property<int?>("ResearchLineId")
                        .HasColumnType("int")
                        .HasComment("Tipo de contrato, relacionado con MasterDataValue.");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasComment("Tipo de contrato, relacionado con MasterDataValue.");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasComment("Entidad Actor asociado al contrato de Asesoría");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Asunto, se refiere al título del tema principal a la cual se va a consultar al remitente");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("AdvisoringRequestId")
                        .IsUnique()
                        .HasFilter("[AdvisoringRequestId] IS NOT NULL");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("ResearchGroupId");

                    b.HasIndex("ResearchLineId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("AdvisoringContract", t =>
                        {
                            t.HasComment("Contrato de Asesoria, en el cual se asume responsabilidades entre el asesor y asesorado por un tiempo limitado");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisorActorId")
                        .HasColumnType("int");

                    b.Property<int>("AdvisoringRequestStatus")
                        .HasColumnType("int")
                        .HasComment("Estado actual de la solicitud de asesoría.");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se realiza la solicitud de asesoría.");

                    b.Property<DateTime?>("DateResponseAdvisor")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se realiza la Respuesta del asesor hacia la petición del Contrato de Asesoría, puede ser nula en una primera instancia");

                    b.Property<int>("RequesterActorId")
                        .HasColumnType("int");

                    b.Property<int?>("ResearchAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("ResearchGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ResearchLineId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseAdvisor")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Respuesta del asesor a la solicitud.");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserActorId")
                        .HasColumnType("int");

                    b.Property<string>("UserMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mensaje del usuario explicando la razón de la solicitud.");

                    b.Property<string>("UserSubject")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Asunto de la razón de la solicitud del usuario");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorActorId");

                    b.HasIndex("RequesterActorId");

                    b.HasIndex("ResearchAreaId");

                    b.HasIndex("ResearchGroupId");

                    b.HasIndex("ResearchLineId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserActorId");

                    b.ToTable("AdvisoringRequest", t =>
                        {
                            t.HasComment("Representa una solicitud de asesoría, incluyendo detalles sobre el mensaje del usuario, la respuesta del asesor y el estado de la solicitud.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisingSessionId")
                        .HasColumnType("int");

                    b.Property<string>("AdvisorExplanation")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Explicación del asesor sobre la tarea.");

                    b.Property<string>("AttachmentsJson")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Archivos adjuntos en formato JSON.");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre de la tarea de asesoría.");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Revisión de la tarea, puede ser nula si aún no se ha revisado, eso es lo que indica el símbolo \"?\" ");

                    b.Property<string>("StudentResponse")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Respuesta del estudiante a la tarea.");

                    b.HasKey("Id");

                    b.HasIndex("AdvisingSessionId");

                    b.ToTable("AdvisoringTask", t =>
                        {
                            t.HasComment("Representa una tarea de asesoría, que incluye detalles sobre la tarea asignada, explicaciones del Asesor y respuestas del estudiante.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentAppointmentStatusId")
                        .HasColumnType("int")
                        .HasComment("Identificador del estado actual de la cita.");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de la cita.");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Ubicación de la cita.");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAppointmentStatusId");

                    b.ToTable("Appointment", t =>
                        {
                            t.HasComment("Permite crear una cita, incluyendo detalles sobre la fecha, ubicación y estado actual.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AppointmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Comentario adicional sobre el estado de la cita.");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasComment("Identificador del estado.");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se asigna el estado.");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre del estado de la cita.");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatus", t =>
                        {
                            t.HasComment("Representa los estados de una cita, el cual incluye el nombre del estado, la fecha y comentarios adicionales.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Token de acceso para el calendario.");

                    b.Property<DateTime?>("AccessTokenExpiration")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de expiración del token de acceso, puede ser nula si no se ha establecido.");

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del actor asociado al calendario.");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tipo de evento asociado al calendario, puede ser nulo.");

                    b.Property<string>("EventsPageToken")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Token de la página de eventos, puede ser nulo.");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Token de actualización para el calendario.");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de expiración del token de actualización, puede ser nula si no se ha establecido.");

                    b.Property<string>("SchedulingUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL de programación del calendario, puede ser nula.");

                    b.Property<string>("UserUri")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URI del usuario asociado al calendario.");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.ToTable("Calendar", t =>
                        {
                            t.HasComment("Representa el calendario que se integrará de Google, el cual incluye detalles sobre tokens de acceso, tipo de eventos y URL de programación.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.CurrentAppointmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("NameCurrentStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre del estado actual de la cita.");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStatusId");

                    b.ToTable("CurrentAppointmentStatus", t =>
                        {
                            t.HasComment("Representa el estado actual de una cita.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int")
                        .HasComment("Identificador del tipo de documento (MasterDataValue).");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Ruta del archivo en el sistema.");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasComment("Tamaño de archivo).");

                    b.Property<string>("OnlineUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("URL pública del documento en línea.");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se subió el documento.");

                    b.Property<int>("UploadedByActorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del usuario que subió el documento (Actor).");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UploadedByActorId");

                    b.ToTable("DocumentCollection");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.DocumentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentCollectionId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentCollectionId");

                    b.ToTable("DocumentVersion");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.GoogleCalendarEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GoogleCalendarEvent");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.MasterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Código único que identifica el dato maestro en el sistema. Este código es utilizado para referenciar el dato de manera única.");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre descriptivo del dato maestro. Este nombre es usado para identificar el dato en interfaces y reportes.");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasComment("Tipo del dato maestro, referenciado por su identificador (por ejemplo, tipo de datos como 'categoría', 'subcategoría', etc.).");

                    b.HasKey("Id");

                    b.ToTable("MasterData", t =>
                        {
                            t.HasComment("Representa los datos maestros utilizados en el sistema, como códigos y tipos de datos relacionados.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Código único que identifica el valor dentro de los datos maestros. Este código es usado para referenciar el valor de manera única.");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en que se creó el valor. Se utiliza para controlar cuándo fue insertado el valor en el sistema.");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Descripción adicional sobre el valor. Se utiliza para proporcionar más información acerca del valor y su contexto.");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasComment("Indica si el valor está activo o inactivo. Es útil para desactivar valores sin eliminarlos permanentemente.");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de la última modificación del valor. Permite conocer cuándo se actualizó por última vez el registro.");

                    b.Property<int>("MasterDataId")
                        .HasColumnType("int")
                        .HasComment("Identificador del dato maestro al que pertenece este valor. Es una clave foránea que refiere a la entidad MasterData.");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre descriptivo del valor. Este nombre se utiliza para mostrar el valor en interfaces y reportes.");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Valor asociado al dato maestro. Puede ser cualquier tipo de dato como una cadena, número o booleano dependiendo del tipo de dato maestro.");

                    b.HasKey("Id");

                    b.HasIndex("MasterDataId");

                    b.ToTable("MasterDataValue", t =>
                        {
                            t.HasComment("Representa los valores asociados a los datos maestros en el sistema. Cada valor tiene un código, nombre y una descripción.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Membership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de finalización de la membresía, puede ser nula si aún está activo.");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int>("MembershipTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de inicio de la membresía.");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("OrganizationActorId");

                    b.ToTable("Membership", t =>
                        {
                            t.HasComment("Representa un miembro de un grupo de investigación, incluyendo detalles sobre su rol y las tesis asociadas.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Mentoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Mentoring", t =>
                        {
                            t.HasComment("Representa una Tutoría, incluyendo los contratos de tutoría asociadas.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.MentoringByAdvisoringContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoringContractId")
                        .HasColumnType("int")
                        .HasComment("Identificador del contrato de asesoría asociado.");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasComment("Este atributo nos permite verificar si el usuario cuenta con un contrato de Tutoría activo");

                    b.Property<int>("MentoringId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la tutoría asociada.");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoringContractId");

                    b.HasIndex("MentoringId");

                    b.ToTable("MentoringByAdvisoringContract", t =>
                        {
                            t.HasComment("Es una tabla intermedia el cual representa un contrato de Tutoría, incluyendo referencias a la tutoría y al contrato de asesoría asociados.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Parameters.BusinessSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessSetting");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Parameters.BusinessSettingParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessSettingId")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessSettingId");

                    b.ToTable("BusinessSettingParameter");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.PreProfessionalInternship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("PreProfessionalInternship", t =>
                        {
                            t.HasComment("Representa una Práctica Pre Profesional, incluyendo los contratos de Prácticas Pre Profesionales asociadas.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.PreProfessionalInternshipByAdvisoringContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoringContractId")
                        .HasColumnType("int")
                        .HasComment("Identificador del contrato de asesoría asociado.");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasComment("Este atributo nos permite verificar si el usuario cuenta con un contrato de PPP activo");

                    b.Property<int>("PreProfessionalInternshipId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la Práctica Pre Profesional asociada.");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoringContractId");

                    b.HasIndex("PreProfessionalInternshipId");

                    b.ToTable("PreProfessionalInternshipByAdvisoringContract", t =>
                        {
                            t.HasComment("Es una tabla intermedia el cual representa un contrato de Práctica Pre Profesional, incluyendo referencias a la Práctica Pre Profesional y al contrato de asesoría asociados.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Advance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdvanceDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha del avance del proyecto.");

                    b.Property<int>("DeliverableDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos entregables (DocumentCollection).");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Descripción del avance.");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del proyecto al que pertenece este avance.");

                    b.Property<int?>("ReportOfResearchGroupDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos del informe del grupo de investigación (DocumentCollection).");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableDocumentCollectionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReportOfResearchGroupDocumentCollectionId");

                    b.ToTable("Advance");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.AdvanceEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del evaluador (Actor).");

                    b.Property<int>("AdvanceId")
                        .HasColumnType("int")
                        .HasComment("Identificador del avance evaluado.");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Comentarios realizados por el evaluador.");

                    b.Property<int>("DocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos asociados a la evaluación (DocumentCollection).");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se realizó la evaluación del avance.");

                    b.Property<int>("StatusEvaluationId")
                        .HasColumnType("int")
                        .HasComment("Identificador del estado de la evaluación (MasterDataValue).");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("AdvanceId");

                    b.HasIndex("DocumentCollectionId");

                    b.HasIndex("StatusEvaluationId");

                    b.ToTable("AdvanceEvaluation");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Funding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Monto asignado al financiamiento.");

                    b.Property<string>("FundingName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre del fondo concursable (si aplica).");

                    b.Property<string>("FundingType")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tipo de financiamiento Propio, FIF, etc).");

                    b.Property<bool>("IsCompetitiveFund")
                        .HasColumnType("bit")
                        .HasComment("Indica si el financiamiento participa en un fondo concursable.");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nombre de la organización asociada al fondo (si aplica).");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del proyecto asociado al financiamiento.");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Funding");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del autor del proyecto (Actor).");

                    b.Property<int>("ClassificationProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la clasificación asignada al proyecto (MasterDataValue).");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de finalización del proyecto.");

                    b.Property<string>("ExecutionPlace")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Lugar donde se ejecuta el proyecto.");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasComment("Estado activo del proyecto (true = activo; false = inactivo).");

                    b.Property<int>("MethodProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del método aplicado en la ejecución del proyecto (MasterDataValue).");

                    b.Property<int>("OdsObjectiveId")
                        .HasColumnType("int")
                        .HasComment("Identificador del obejtivo ODS para el proyecto (MasterDataValue).");

                    b.Property<int>("PlanDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos del plan (DocumentCollection).");

                    b.Property<int?>("ReportAdvisorDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos del dictamen del asesor (DocumentCollection).");

                    b.Property<int?>("ReportOfDegreesAndTittlesCommitteeId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos del acuerdo de la comisión de grados y títulos");

                    b.Property<int?>("ReportOfResearchGroupDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos del dictamen o acuerdo del grupo de investigación (DocumentCollection).");

                    b.Property<int>("ResearchAreaProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del área de investigación vinculada (Actor).");

                    b.Property<int>("ResearchGroupProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del grupo de investigación asociado al proyecto (Actor).");

                    b.Property<int>("ResearchLineProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la línea de investigación correspondiente (Actor).");

                    b.Property<int?>("ResolutionDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos de resolución (DocumentCollection).");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de inicio del proyecto.");

                    b.Property<int>("StateProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del estado asignado al proyecto (MasterDataValue).");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Título o nombre del proyecto.");

                    b.HasKey("Id");

                    b.HasIndex("AuthorProjectId");

                    b.HasIndex("ClassificationProjectId");

                    b.HasIndex("MethodProjectId");

                    b.HasIndex("OdsObjectiveId");

                    b.HasIndex("PlanDocumentCollectionId");

                    b.HasIndex("ReportAdvisorDocumentCollectionId");

                    b.HasIndex("ReportOfDegreesAndTittlesCommitteeId");

                    b.HasIndex("ReportOfResearchGroupDocumentCollectionId");

                    b.HasIndex("ResearchAreaProjectId");

                    b.HasIndex("ResearchGroupProjectId");

                    b.HasIndex("ResearchLineProjectId");

                    b.HasIndex("ResolutionDocumentCollectionId");

                    b.HasIndex("StateProjectId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ProjectActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del actor que participa en el proyecto (Actor).");

                    b.Property<int>("AuthorTypeId")
                        .HasColumnType("int")
                        .HasComment("Identificador del tipo de autor dentro del proyecto (MasterDataValue).");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Justificación para la participación del actor en el proyecto.");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del proyecto asociado al actor.");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("AuthorTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectActor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ProjectEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del evaluador (Actor).");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Comentarios realizados por el evaluador.");

                    b.Property<int>("DocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos asociados a la evaluación (DocumentCollection).");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se realizó la evaluación.");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del proyecto evaluado.");

                    b.Property<int>("StatusEvaluationId")
                        .HasColumnType("int")
                        .HasComment("Identificador del estado de la evaluación (MasterDataValue).");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("DocumentCollectionId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusEvaluationId");

                    b.ToTable("ProjectEvaluation");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ScientificProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Código de la producción científica.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de creación del registro.");

                    b.Property<int>("DeliverableDocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos entregables (DocumentCollection).");

                    b.Property<string>("Doi")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Identificador DOI de la producción científica.");

                    b.Property<int>("ProductionTypeId")
                        .HasColumnType("int")
                        .HasComment("Identificador del tipo de producción científica (MasterDataValue).");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasComment("Identificador del proyecto asociado a la producción científica.");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha de publicación de la producción científica.");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Título de la producción científica.");

                    b.HasKey("Id");

                    b.HasIndex("DeliverableDocumentCollectionId");

                    b.HasIndex("ProductionTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ScientificProduction");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ScientificProductionEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del evaluador (Actor).");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Comentarios realizados por el evaluador.");

                    b.Property<int>("DocumentCollectionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la colección de documentos asociados a la evaluación (DocumentCollection).");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se realizó la evaluación.");

                    b.Property<int>("ScientificProductionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la producción científica evaluada.");

                    b.Property<int>("StatusEvaluationId")
                        .HasColumnType("int")
                        .HasComment("Identificador del estado de la evaluación (MasterDataValue).");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("DocumentCollectionId");

                    b.HasIndex("ScientificProductionId");

                    b.HasIndex("StatusEvaluationId");

                    b.ToTable("ScientificProductionEvaluation");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.RoleByActorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleByActorType");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Thesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MainAdvisorMembershipId")
                        .HasColumnType("int")
                        .HasComment("Identificador del miembro del grupo que es asesor principal.");

                    b.Property<int?>("Secondary1AdvisorMembershipId")
                        .HasColumnType("int")
                        .HasComment("Identificador del miembro del grupo que es asesor secundario 1, puede ser nulo.");

                    b.Property<int?>("Secondary2AdvisorMembershipId")
                        .HasColumnType("int")
                        .HasComment("Identificador del miembro del grupo que es asesor secundario 2, puede ser nulo.");

                    b.Property<int>("TesistaMembershipId")
                        .HasColumnType("int")
                        .HasComment("Identificador del miembro del grupo que es tesista.");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Título de la tesis.");

                    b.HasKey("Id");

                    b.HasIndex("MainAdvisorMembershipId");

                    b.HasIndex("Secondary1AdvisorMembershipId");

                    b.HasIndex("Secondary2AdvisorMembershipId");

                    b.HasIndex("TesistaMembershipId");

                    b.ToTable("Thesis", t =>
                        {
                            t.HasComment("Representa una tesis, incluyendo detalles sobre el título, asesores y líneas de investigación asociadas.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ThesisByAdvisoringContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisoringContractId")
                        .HasColumnType("int")
                        .HasComment("Identificador del contrato de asesoría asociado.");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit")
                        .HasComment("Este atributo nos permite verificar si el usuario cuenta con un contrato de Tesis activo");

                    b.Property<int>("ThesisId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la tesis asociada.");

                    b.HasKey("Id");

                    b.HasIndex("AdvisoringContractId");

                    b.HasIndex("ThesisId");

                    b.ToTable("ThesisByAdvisoringContract", t =>
                        {
                            t.HasComment("Representa un contrato de tesis, el cual representa una tabla intermedia donde incluye referencias a la tesis y al contrato de asesoría asociados.");
                        });
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ThesisStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Archivo asociado al estado de la tesis.");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Fecha en la que se emite el estado.");

                    b.Property<int>("ThesisId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la tesis asociada.");

                    b.Property<int>("ThesisStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThesisId");

                    b.HasIndex("ThesisStatusId");

                    b.ToTable("ThesisStatusHistory", t =>
                        {
                            t.HasComment("Representa el historial de estado de una tesis, incluyendo detalles sobre el estado, fecha de emisión y archivo asociado.");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Actor", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ActorType", "ActorType")
                        .WithMany()
                        .HasForeignKey("ActorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "IdentificationType")
                        .WithMany()
                        .HasForeignKey("IdentificationTypeId");

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Role", "MainRole")
                        .WithMany()
                        .HasForeignKey("MainRoleId");

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActorType");

                    b.Navigation("IdentificationType");

                    b.Navigation("MainRole");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ActorSecondaryRole", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("ActorSecondaryRoles")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Role", "Role")
                        .WithMany("ActorSecondaryRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisingSession", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", "AdvisoringContract")
                        .WithMany("AdvisingSessions")
                        .HasForeignKey("AdvisoringContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AdvisingSessions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvisoringContract");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", null)
                        .WithMany("AdvisoringContracts")
                        .HasForeignKey("ActorId");

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "AdvisorActor")
                        .WithMany()
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisoringRequest", "AdvisoringRequest")
                        .WithOne("AdvisoringContract")
                        .HasForeignKey("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", "AdvisoringRequestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "ContractStatus")
                        .WithMany()
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchAreaActor")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchGroupActor")
                        .WithMany()
                        .HasForeignKey("ResearchGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchLineActor")
                        .WithMany()
                        .HasForeignKey("ResearchLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "StudentActor")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvisorActor");

                    b.Navigation("AdvisoringRequest");

                    b.Navigation("ContractStatus");

                    b.Navigation("ResearchAreaActor");

                    b.Navigation("ResearchGroupActor");

                    b.Navigation("ResearchLineActor");

                    b.Navigation("ServiceType");

                    b.Navigation("StudentActor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringRequest", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "AdvisorActor")
                        .WithMany()
                        .HasForeignKey("AdvisorActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "RequesterActor")
                        .WithMany()
                        .HasForeignKey("RequesterActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchAreaActor")
                        .WithMany()
                        .HasForeignKey("ResearchAreaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchGroupActor")
                        .WithMany()
                        .HasForeignKey("ResearchGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchLineActor")
                        .WithMany()
                        .HasForeignKey("ResearchLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "UserActor")
                        .WithMany()
                        .HasForeignKey("UserActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvisorActor");

                    b.Navigation("RequesterActor");

                    b.Navigation("ResearchAreaActor");

                    b.Navigation("ResearchGroupActor");

                    b.Navigation("ResearchLineActor");

                    b.Navigation("ServiceType");

                    b.Navigation("UserActor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringTask", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisingSession", "AdvisingSession")
                        .WithMany("AdvisoringTasks")
                        .HasForeignKey("AdvisingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvisingSession");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.CurrentAppointmentStatus", "CurrentAppointmentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentAppointmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAppointmentStatus");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Calendar", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("Calendars")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.CurrentAppointmentStatus", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AppointmentStatus", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentStatus");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", "Contract")
                        .WithMany("DocumentCollections")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "UploadedByActor")
                        .WithMany("DocumentCollections")
                        .HasForeignKey("UploadedByActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("DocumentType");

                    b.Navigation("UploadedByActor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.DocumentVersion", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "DocumentCollection")
                        .WithMany("DocumentVersions")
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DocumentCollection");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicRoleClaim", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicUser", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("Users")
                        .HasForeignKey("ActorId");

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterData", "MasterData")
                        .WithMany("MasterDataValues")
                        .HasForeignKey("MasterDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterData");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Membership", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "MemberActor")
                        .WithMany("Memberships")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "MembershipType")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "OrganizationActor")
                        .WithMany()
                        .HasForeignKey("OrganizationActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MemberActor");

                    b.Navigation("MembershipType");

                    b.Navigation("OrganizationActor");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.MentoringByAdvisoringContract", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", "AdvisoringContract")
                        .WithMany("MentoringContracts")
                        .HasForeignKey("AdvisoringContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Mentoring", "Mentoring")
                        .WithMany("MentoringContracts")
                        .HasForeignKey("MentoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvisoringContract");

                    b.Navigation("Mentoring");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Parameters.BusinessSettingParameter", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Parameters.BusinessSetting", "BusinessSetting")
                        .WithMany("BusinessSettingParameters")
                        .HasForeignKey("BusinessSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessSetting");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.PreProfessionalInternshipByAdvisoringContract", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", "AdvisoringContract")
                        .WithMany("PreProfessionalInternshipContracts")
                        .HasForeignKey("AdvisoringContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.PreProfessionalInternship", "PreProfessionalInternship")
                        .WithMany("PreProfessionalInternshipContracts")
                        .HasForeignKey("PreProfessionalInternshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvisoringContract");

                    b.Navigation("PreProfessionalInternship");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Advance", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "DeliverableDocumentCollection")
                        .WithMany()
                        .HasForeignKey("DeliverableDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", "Project")
                        .WithMany("Advances")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "ReportOfResearchGroupDocumentCollection")
                        .WithMany()
                        .HasForeignKey("ReportOfResearchGroupDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeliverableDocumentCollection");

                    b.Navigation("Project");

                    b.Navigation("ReportOfResearchGroupDocumentCollection");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.AdvanceEvaluation", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("AdvanceEvaluations")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Advance", "Advance")
                        .WithMany("AdvanceEvaluations")
                        .HasForeignKey("AdvanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "DocumentCollection")
                        .WithMany()
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "StatusEvaluation")
                        .WithMany()
                        .HasForeignKey("StatusEvaluationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Advance");

                    b.Navigation("DocumentCollection");

                    b.Navigation("StatusEvaluation");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Funding", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", "Project")
                        .WithMany("Fundings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "AuthorProject")
                        .WithMany("AuthorProjects")
                        .HasForeignKey("AuthorProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "ClassificationProject")
                        .WithMany()
                        .HasForeignKey("ClassificationProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "MethodProject")
                        .WithMany()
                        .HasForeignKey("MethodProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "OdsObjective")
                        .WithMany()
                        .HasForeignKey("OdsObjectiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "PlanDocumentCollection")
                        .WithMany()
                        .HasForeignKey("PlanDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "ReportAdvisorDocumentCollection")
                        .WithMany()
                        .HasForeignKey("ReportAdvisorDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "ReportOfDegreesAndTittlesCommittee")
                        .WithMany()
                        .HasForeignKey("ReportOfDegreesAndTittlesCommitteeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "ReportOfResearchGroupDocumentCollection")
                        .WithMany()
                        .HasForeignKey("ReportOfResearchGroupDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchAreaProject")
                        .WithMany("ResearchAreaProjects")
                        .HasForeignKey("ResearchAreaProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchGroupProject")
                        .WithMany("ResearchGroupProjects")
                        .HasForeignKey("ResearchGroupProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "ResearchLineProject")
                        .WithMany("ResearchLineProjects")
                        .HasForeignKey("ResearchLineProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "ResolutionDocumentCollection")
                        .WithMany()
                        .HasForeignKey("ResolutionDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "StateProject")
                        .WithMany()
                        .HasForeignKey("StateProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorProject");

                    b.Navigation("ClassificationProject");

                    b.Navigation("MethodProject");

                    b.Navigation("OdsObjective");

                    b.Navigation("PlanDocumentCollection");

                    b.Navigation("ReportAdvisorDocumentCollection");

                    b.Navigation("ReportOfDegreesAndTittlesCommittee");

                    b.Navigation("ReportOfResearchGroupDocumentCollection");

                    b.Navigation("ResearchAreaProject");

                    b.Navigation("ResearchGroupProject");

                    b.Navigation("ResearchLineProject");

                    b.Navigation("ResolutionDocumentCollection");

                    b.Navigation("StateProject");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ProjectActor", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("ProjectActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "AuthorType")
                        .WithMany()
                        .HasForeignKey("AuthorTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", "Project")
                        .WithMany("ProjectActors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("AuthorType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ProjectEvaluation", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("ProjectEvaluations")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "DocumentCollection")
                        .WithMany()
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", "Project")
                        .WithMany("ProjectEvaluations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "StatusEvaluation")
                        .WithMany()
                        .HasForeignKey("StatusEvaluationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("DocumentCollection");

                    b.Navigation("Project");

                    b.Navigation("StatusEvaluation");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ScientificProduction", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "DeliverableDocumentCollection")
                        .WithMany()
                        .HasForeignKey("DeliverableDocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "ProductionType")
                        .WithMany()
                        .HasForeignKey("ProductionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", "Project")
                        .WithMany("ScientificProductions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliverableDocumentCollection");

                    b.Navigation("ProductionType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ScientificProductionEvaluation", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Actor", "Actor")
                        .WithMany("ScientificProductionEvaluations")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", "DocumentCollection")
                        .WithMany()
                        .HasForeignKey("DocumentCollectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ScientificProduction", "ScientificProduction")
                        .WithMany("ScientificProductionEvaluations")
                        .HasForeignKey("ScientificProductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "StatusEvaluation")
                        .WithMany()
                        .HasForeignKey("StatusEvaluationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("DocumentCollection");

                    b.Navigation("ScientificProduction");

                    b.Navigation("StatusEvaluation");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Role", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Role", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.RoleByActorType", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.ActorType", "ActorType")
                        .WithMany("RoleByActorTypes")
                        .HasForeignKey("ActorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Role", "Role")
                        .WithMany("RoleByActorTypes")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActorType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Thesis", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Membership", "MainAdvisorMembership")
                        .WithMany("MainAdvisorThesis")
                        .HasForeignKey("MainAdvisorMembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Membership", "Secondary1AdvisorMembership")
                        .WithMany("Secondary1AdvisorThesis")
                        .HasForeignKey("Secondary1AdvisorMembershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Membership", "Secondary2AdvisorMembership")
                        .WithMany("Secondary2AdvisorThesis")
                        .HasForeignKey("Secondary2AdvisorMembershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Membership", "TesistaMembership")
                        .WithMany("TesistaThesis")
                        .HasForeignKey("TesistaMembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainAdvisorMembership");

                    b.Navigation("Secondary1AdvisorMembership");

                    b.Navigation("Secondary2AdvisorMembership");

                    b.Navigation("TesistaMembership");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ThesisByAdvisoringContract", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", "AdvisoringContract")
                        .WithMany("ThesisContracts")
                        .HasForeignKey("AdvisoringContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Thesis", "Thesis")
                        .WithMany("ThesisContracts")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvisoringContract");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ThesisStatusHistory", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Thesis", "Thesis")
                        .WithMany("ThesisStatusHistories")
                        .HasForeignKey("ThesisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.MasterDataValue", "ThesisStatus")
                        .WithMany()
                        .HasForeignKey("ThesisStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thesis");

                    b.Navigation("ThesisStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Actor", b =>
                {
                    b.Navigation("ActorSecondaryRoles");

                    b.Navigation("AdvanceEvaluations");

                    b.Navigation("AdvisoringContracts");

                    b.Navigation("AuthorProjects");

                    b.Navigation("Calendars");

                    b.Navigation("DocumentCollections");

                    b.Navigation("Memberships");

                    b.Navigation("ProjectActors");

                    b.Navigation("ProjectEvaluations");

                    b.Navigation("ResearchAreaProjects");

                    b.Navigation("ResearchGroupProjects");

                    b.Navigation("ResearchLineProjects");

                    b.Navigation("ScientificProductionEvaluations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ActorType", b =>
                {
                    b.Navigation("RoleByActorTypes");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisingSession", b =>
                {
                    b.Navigation("AdvisoringTasks");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringContract", b =>
                {
                    b.Navigation("AdvisingSessions");

                    b.Navigation("DocumentCollections");

                    b.Navigation("MentoringContracts");

                    b.Navigation("PreProfessionalInternshipContracts");

                    b.Navigation("ThesisContracts");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.AdvisoringRequest", b =>
                {
                    b.Navigation("AdvisoringContract");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AdvisingSessions");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.DocumentCollection", b =>
                {
                    b.Navigation("DocumentVersions");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Identity.AcademicRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.MasterData", b =>
                {
                    b.Navigation("MasterDataValues");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Membership", b =>
                {
                    b.Navigation("MainAdvisorThesis");

                    b.Navigation("Secondary1AdvisorThesis");

                    b.Navigation("Secondary2AdvisorThesis");

                    b.Navigation("TesistaThesis");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Mentoring", b =>
                {
                    b.Navigation("MentoringContracts");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Parameters.BusinessSetting", b =>
                {
                    b.Navigation("BusinessSettingParameters");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.PreProfessionalInternship", b =>
                {
                    b.Navigation("PreProfessionalInternshipContracts");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Advance", b =>
                {
                    b.Navigation("AdvanceEvaluations");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.Project", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Fundings");

                    b.Navigation("ProjectActors");

                    b.Navigation("ProjectEvaluations");

                    b.Navigation("ScientificProductions");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.ProjectIDI.ScientificProduction", b =>
                {
                    b.Navigation("ScientificProductionEvaluations");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Role", b =>
                {
                    b.Navigation("ActorSecondaryRoles");

                    b.Navigation("Children");

                    b.Navigation("RoleByActorTypes");
                });

            modelBuilder.Entity("GestionAsesoria.Operator.Domain.Entities.Thesis", b =>
                {
                    b.Navigation("ThesisContracts");

                    b.Navigation("ThesisStatusHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
