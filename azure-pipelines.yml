trigger:
  branches:
    include:
      - main  # Cambia a la rama que deseas analizar automáticamente

pool:
  vmImage: 'windows-latest'

variables:
  SONAR_HOST_URL: 'http://localhost:9000'  # Cambia a la URL de tu SonarQube
  SONAR_TOKEN: $(SONAR_TOKEN)  # Variable para el token de SonarQube, definida como secreta

steps:
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SonarQubeGenericService'  # Nombre de la conexión de servicio creada
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'AsesoriaAcademica_GestionAsesoria-backend'
    cliProjectName: 'GestionAsesoria Backend'
    cliProjectVersion: '1.0'
    extraProperties: |
      sonar.host.url=$(SONAR_HOST_URL)
      sonar.login=$(SONAR_TOKEN)

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.sln'  # Encuentra y compila automáticamente la solución en el repositorio

- task: SonarQubeAnalyze@5  # Ejecuta el análisis

- task: SonarQubePublish@5  # Publica los resultados en SonarQube
  inputs:
    pollingTimeoutSec: '300'
